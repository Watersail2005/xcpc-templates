<snippet>
	<content><![CDATA[
struct frac
{
	int num, den;
	frac() : num(0), den(1){}
	frac(int val)
	{
		num = val;
		den = 1;
	}
	frac(int a, int b)
	{
		int g = __gcd(a, b);
		num = a / g;
		den = b / g;
		if (den < 0)
		{
			num = -num;
			den = -den;
		}
	}
};
frac operator +(frac x, frac y)
{
	return frac(x.num * y.den + y.num * x.den, x.den * y.den);
}
frac operator -(frac x, frac y)
{
	return frac(x.num * y.den - y.num * x.den, x.den * y.den);
}
frac operator *(frac x, frac y)
{
	return frac(x.num * y.num, x.den * y.den);
}
frac operator /(frac x, frac y)
{
	return frac(x.num * y.den, x.den * y.num);
}
frac operator +(frac x, int val)
{
	return frac(x.num + x.den * val, x.den);
}
frac operator *(frac x, int val)
{
	return frac(x.num * val, x.den);
}
frac operator /(frac x, int val)
{
	return frac(x.num, x.den * val);
}
bool operator ==(frac x, frac y)
{
	return x.num == y.num && x.den == y.den;
}
bool operator !=(frac x, frac y)
{
	return x.num != y.num || x.den != y.den;
}
bool operator <(frac x, frac y)
{
	return x.num * y.den < y.num * x.den;
}
bool operator <=(frac x, frac y)
{
	return x.num * y.den <= y.num * x.den;
}
bool operator >(frac x, frac y)
{
	return x.num * y.den > y.num * x.den;
}
bool operator >=(frac x, frac y)
{
	return x.num * y.den >= y.num * x.den;
}
frac abs(frac x)
{
	if (x.num < 0)
	{
		return frac(-x.num, x.den);
	}
	return x;
}
frac min(frac x,frac y)
{
	return x<y?x:y;
}
frac max(frac x,frac y)
{
	return x>y?x:y;
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>fra</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope>
</snippet>
